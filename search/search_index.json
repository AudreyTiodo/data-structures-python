{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"__init__/","title":"Documentation du package <code>data_structures</code>","text":"<p>Le package <code>data_structures</code> est une collection d'impl\u00e9mentations de structures de donn\u00e9es de base. Ce package offre des impl\u00e9mentations pour plusieurs structures de donn\u00e9es courantes, qui sont utilis\u00e9es dans de nombreux algorithmes et applications logicielles.</p>"},{"location":"__init__/#contenu-du-package","title":"Contenu du package","text":"<p>Ce package fournit des impl\u00e9mentations des structures de donn\u00e9es suivantes : - Tableaux (bas\u00e9s sur <code>numpy</code>) - Piles (Stacks) - Files (Queues) - Listes cha\u00een\u00e9es (Linked Lists) - Arbres binaires de recherche (Binary Search Trees) - Graphes (Graphs)</p>"},{"location":"__init__/#modules-et-classes","title":"Modules et classes","text":""},{"location":"__init__/#array","title":"<code>array</code>","text":"<ul> <li><code>MyArray</code> : Une extension de <code>numpy.ndarray</code>, ajoutant des m\u00e9thodes suppl\u00e9mentaires pour effectuer des calculs comme la somme, la moyenne, la recherche du maximum et du minimum.</li> </ul>"},{"location":"__init__/#stack","title":"<code>stack</code>","text":"<ul> <li><code>Stack</code> : Une impl\u00e9mentation de pile (Stack) bas\u00e9e sur une liste, permettant d'ajouter (<code>push</code>) et de retirer (<code>pop</code>) des \u00e9l\u00e9ments dans un ordre LIFO (Last In, First Out).</li> </ul>"},{"location":"__init__/#queue","title":"<code>queue</code>","text":"<ul> <li><code>Queue</code> : Une impl\u00e9mentation de file (Queue) bas\u00e9e sur une liste, permettant d'ajouter (<code>enqueue</code>) et de retirer (<code>dequeue</code>) des \u00e9l\u00e9ments dans un ordre FIFO (First In, First Out).</li> </ul>"},{"location":"__init__/#linked_list","title":"<code>linked_list</code>","text":"<ul> <li><code>LinkedList</code> : Une impl\u00e9mentation de liste simplement cha\u00een\u00e9e, permettant d'ajouter, de supprimer et de rechercher des \u00e9l\u00e9ments \u00e0 une position donn\u00e9e dans la liste.</li> </ul>"},{"location":"__init__/#tree","title":"<code>tree</code>","text":"<ul> <li><code>BinarySearchTree</code> : Une impl\u00e9mentation d'arbre binaire de recherche (BST), permettant d'ins\u00e9rer, de rechercher et de traverser l'arbre de diff\u00e9rentes mani\u00e8res (infixe, pr\u00e9fixe et postfixe).</li> <li><code>TreeNode</code> : Classe repr\u00e9sentant un n\u0153ud dans un arbre binaire, avec un attribut <code>value</code> pour stocker la valeur du n\u0153ud et des pointeurs vers ses sous-arbres gauche et droit.</li> </ul>"},{"location":"__init__/#graph","title":"<code>graph</code>","text":"<ul> <li><code>Graph</code> : Une impl\u00e9mentation de graphe en utilisant une liste d'adjacence, permettant d'ajouter des ar\u00eates et de parcourir le graphe \u00e0 l'aide de recherches en profondeur (DFS) ou en largeur (BFS).</li> </ul>"},{"location":"__init__/#variables-globales","title":"Variables globales","text":""},{"location":"__init__/#__all__","title":"<code>__all__</code>","text":"<p>La variable <code>__all__</code> d\u00e9finit les objets que ce package exporte lorsqu'il est import\u00e9 avec <code>from package import *</code>. Elle contient les \u00e9l\u00e9ments suivants : ```python ['MyArray', 'Stack', 'Queue', 'LinkedList', 'BinarySearchTree', 'TreeNode', 'Graph']</p>"},{"location":"array/","title":"Documentation de la classe <code>MyArray</code>","text":"<p>La classe <code>MyArray</code> est une extension de la classe <code>numpy.ndarray</code>, ajoutant des m\u00e9thodes suppl\u00e9mentaires pour faciliter l'interaction avec des tableaux num\u00e9riques. Elle h\u00e9rite de toutes les fonctionnalit\u00e9s de <code>numpy.ndarray</code> tout en ajoutant des fonctionnalit\u00e9s suppl\u00e9mentaires pour la somme, la moyenne, la forme, le tri, et d'autres op\u00e9rations.</p>"},{"location":"array/#attributs","title":"Attributs","text":"<ul> <li>H\u00e9rite de tous les attributs de <code>numpy.ndarray</code>.</li> </ul>"},{"location":"array/#methodes","title":"M\u00e9thodes","text":""},{"location":"array/#__new__cls-input_array","title":"<code>__new__(cls, input_array)</code>","text":"<p>Cr\u00e9e une nouvelle instance de la classe <code>MyArray</code>.</p>"},{"location":"array/#arguments","title":"Arguments :","text":"<ul> <li><code>input_array</code> : Les donn\u00e9es d'entr\u00e9e qui peuvent \u00eatre converties en un tableau numpy.</li> </ul>"},{"location":"array/#retour","title":"Retour :","text":"<ul> <li>Retourne une instance de <code>MyArray</code> contenant les donn\u00e9es sp\u00e9cifi\u00e9es.</li> </ul>"},{"location":"array/#__array_finalize__self-obj","title":"<code>__array_finalize__(self, obj)</code>","text":"<p>Finalise la cr\u00e9ation de l'array. Cette m\u00e9thode est appel\u00e9e lors de la cr\u00e9ation ou de la modification de l'array, mais dans ce cas, elle ne fait rien de sp\u00e9cifique \u00e0 part v\u00e9rifier si l'objet est <code>None</code>.</p>"},{"location":"array/#arguments_1","title":"Arguments :","text":"<ul> <li><code>obj</code> : L'objet auquel l'array est associ\u00e9 (par exemple, une vue ou une modification).</li> </ul>"},{"location":"array/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour.</li> </ul>"},{"location":"array/#sumself","title":"<code>sum(self)</code>","text":"<p>Calcule la somme des \u00e9l\u00e9ments du tableau.</p>"},{"location":"array/#retour_2","title":"Retour :","text":"<ul> <li>Retourne la somme de tous les \u00e9l\u00e9ments dans l'array, \u00e9quivalent \u00e0 <code>numpy.sum()</code>.</li> </ul>"},{"location":"array/#meanself","title":"<code>mean(self)</code>","text":"<p>Calcule la moyenne des \u00e9l\u00e9ments du tableau.</p>"},{"location":"array/#retour_3","title":"Retour :","text":"<ul> <li>Retourne la moyenne des \u00e9l\u00e9ments dans l'array, \u00e9quivalent \u00e0 <code>numpy.mean()</code>.</li> </ul>"},{"location":"array/#shapeself","title":"<code>shape(self)</code>","text":"<p>Retourne la forme du tableau.</p>"},{"location":"array/#retour_4","title":"Retour :","text":"<ul> <li>Retourne un tuple repr\u00e9sentant la forme du tableau (le nombre de dimensions et la taille dans chaque dimension).</li> </ul>"},{"location":"array/#reshapeself-new_shape","title":"<code>reshape(self, new_shape)</code>","text":"<p>Redimensionne le tableau \u00e0 une nouvelle forme.</p>"},{"location":"array/#arguments_2","title":"Arguments :","text":"<ul> <li><code>new_shape</code> : La nouvelle forme souhait\u00e9e pour le tableau. Cela doit \u00eatre un tuple repr\u00e9sentant les dimensions du tableau redimensionn\u00e9.</li> </ul>"},{"location":"array/#retour_5","title":"Retour :","text":"<ul> <li>Retourne un nouvel objet <code>MyArray</code> redimensionn\u00e9 avec la forme sp\u00e9cifi\u00e9e.</li> </ul>"},{"location":"array/#maxself","title":"<code>max(self)</code>","text":"<p>Retourne la valeur maximale dans le tableau.</p>"},{"location":"array/#retour_6","title":"Retour :","text":"<ul> <li>Retourne la valeur maximale parmi les \u00e9l\u00e9ments du tableau, \u00e9quivalent \u00e0 <code>numpy.max()</code>.</li> </ul>"},{"location":"array/#minself","title":"<code>min(self)</code>","text":"<p>Retourne la valeur minimale dans le tableau.</p>"},{"location":"array/#retour_7","title":"Retour :","text":"<ul> <li>Retourne la valeur minimale parmi les \u00e9l\u00e9ments du tableau, \u00e9quivalent \u00e0 <code>numpy.min()</code>.</li> </ul>"},{"location":"array/#sortself-axis-1","title":"<code>sort(self, axis=-1)</code>","text":"<p>Trie les \u00e9l\u00e9ments du tableau.</p>"},{"location":"array/#arguments_3","title":"Arguments :","text":"<ul> <li><code>axis</code> : L'axe le long duquel trier les \u00e9l\u00e9ments. Par d\u00e9faut, il trie le tableau \u00e0 plat (sur l'axe <code>-1</code>).</li> </ul>"},{"location":"array/#retour_8","title":"Retour :","text":"<ul> <li>Retourne un nouvel objet <code>MyArray</code> avec les \u00e9l\u00e9ments tri\u00e9s selon l'axe sp\u00e9cifi\u00e9.</li> </ul>"},{"location":"array/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python import numpy as np</p>"},{"location":"array/#creation-dun-tableau-myarray-a-partir-dune-liste","title":"Cr\u00e9ation d'un tableau MyArray \u00e0 partir d'une liste","text":"<p>arr = MyArray([1, 2, 3, 4, 5])</p>"},{"location":"array/#somme-des-elements","title":"Somme des \u00e9l\u00e9ments","text":"<p>print(arr.sum())  # Affiche : 15</p>"},{"location":"array/#moyenne-des-elements","title":"Moyenne des \u00e9l\u00e9ments","text":"<p>print(arr.mean())  # Affiche : 3.0</p>"},{"location":"array/#forme-du-tableau","title":"Forme du tableau","text":"<p>print(arr.shape())  # Affiche : (5,)</p>"},{"location":"array/#redimensionnement","title":"Redimensionnement","text":"<p>arr_reshaped = arr.reshape((1, 5)) print(arr_reshaped.shape())  # Affiche : (1, 5)</p>"},{"location":"array/#valeur-maximale","title":"Valeur maximale","text":"<p>print(arr.max())  # Affiche : 5</p>"},{"location":"array/#tri-des-elements","title":"Tri des \u00e9l\u00e9ments","text":"<p>print(arr.sort())  # Affiche : [1 2 3 4 5]</p>"},{"location":"graph/","title":"Documentation de la classe <code>Graph</code>","text":"<p>La classe <code>Graph</code> impl\u00e9mente un graphe \u00e0 l'aide d'une liste d'adjacence, et offre des m\u00e9thodes pour effectuer des travers\u00e9es en profondeur (DFS) et en largeur (BFS), ainsi que pour ajouter des ar\u00eates et afficher le graphe sous forme de cha\u00eene.</p>"},{"location":"graph/#attributs","title":"Attributs","text":"<ul> <li><code>graph</code> : Un dictionnaire de type <code>defaultdict(list)</code> repr\u00e9sentant les ar\u00eates du graphe. Chaque cl\u00e9 est un sommet, et la valeur associ\u00e9e est la liste des voisins de ce sommet.</li> <li><code>directed</code> : Bool\u00e9en indiquant si le graphe est dirig\u00e9 (<code>True</code>) ou non dirig\u00e9 (<code>False</code>).</li> </ul>"},{"location":"graph/#methodes","title":"M\u00e9thodes","text":""},{"location":"graph/#__init__self-directedfalse","title":"<code>__init__(self, directed=False)</code>","text":"<p>Initialise un graphe vide.</p>"},{"location":"graph/#arguments","title":"Arguments :","text":"<ul> <li><code>directed</code> : Bool\u00e9en. Si <code>True</code>, cr\u00e9e un graphe dirig\u00e9, sinon cr\u00e9e un graphe non dirig\u00e9 (par d\u00e9faut <code>False</code>).</li> </ul>"},{"location":"graph/#retour","title":"Retour :","text":"<ul> <li>Aucun retour. La m\u00e9thode initialise simplement le graphe.</li> </ul>"},{"location":"graph/#add_edgeself-u-v","title":"<code>add_edge(self, u, v)</code>","text":"<p>Ajoute une ar\u00eate entre les sommets <code>u</code> et <code>v</code>.</p>"},{"location":"graph/#arguments_1","title":"Arguments :","text":"<ul> <li><code>u</code> : Premier sommet de l'ar\u00eate.</li> <li><code>v</code> : Deuxi\u00e8me sommet de l'ar\u00eate.</li> </ul>"},{"location":"graph/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour. Les ar\u00eates sont ajout\u00e9es dans la liste d'adjacence du graphe. Si le graphe est non dirig\u00e9, l'ar\u00eate est ajout\u00e9e dans les deux sens (<code>u -&gt; v</code> et <code>v -&gt; u</code>).</li> </ul>"},{"location":"graph/#dfsself-start","title":"<code>dfs(self, start)</code>","text":"<p>Effectue une travers\u00e9e en profondeur (Depth-First Search, DFS) \u00e0 partir du sommet <code>start</code>.</p>"},{"location":"graph/#arguments_2","title":"Arguments :","text":"<ul> <li><code>start</code> : Sommet de d\u00e9part pour la travers\u00e9e DFS.</li> </ul>"},{"location":"graph/#retour_2","title":"Retour :","text":"<ul> <li>Une liste des sommets dans l'ordre de leur visite lors de la travers\u00e9e DFS.</li> </ul>"},{"location":"graph/#bfsself-start","title":"<code>bfs(self, start)</code>","text":"<p>Effectue une travers\u00e9e en largeur (Breadth-First Search, BFS) \u00e0 partir du sommet <code>start</code>.</p>"},{"location":"graph/#arguments_3","title":"Arguments :","text":"<ul> <li><code>start</code> : Sommet de d\u00e9part pour la travers\u00e9e BFS.</li> </ul>"},{"location":"graph/#retour_3","title":"Retour :","text":"<ul> <li>Une liste des sommets dans l'ordre de leur visite lors de la travers\u00e9e BFS.</li> </ul>"},{"location":"graph/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Retourne une repr\u00e9sentation en cha\u00eene du graphe sous forme de liste d'adjacence tri\u00e9e.</p>"},{"location":"graph/#retour_4","title":"Retour :","text":"<ul> <li>Une cha\u00eene repr\u00e9sentant le graphe, chaque ligne correspondante \u00e0 un sommet et ses voisins sous forme de liste.</li> </ul>"},{"location":"graph/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python</p>"},{"location":"graph/#creation-dun-graphe-non-dirige","title":"Cr\u00e9ation d'un graphe non dirig\u00e9","text":"<p>graph = Graph(directed=False)</p>"},{"location":"graph/#ajout-daretes","title":"Ajout d'ar\u00eates","text":"<p>graph.add_edge(1, 2) graph.add_edge(1, 3) graph.add_edge(2, 4)</p>"},{"location":"graph/#affichage-du-graphe","title":"Affichage du graphe","text":"<p>print(graph)</p>"},{"location":"graph/#affiche","title":"Affiche :","text":""},{"location":"graph/#1-2-3","title":"1: [2, 3]","text":""},{"location":"graph/#2-1-4","title":"2: [1, 4]","text":""},{"location":"graph/#3-1","title":"3: [1]","text":""},{"location":"graph/#4-2","title":"4: [2]","text":""},{"location":"graph/#traversee-dfs","title":"Travers\u00e9e DFS","text":"<p>print(graph.dfs(1))  # Affiche : [1, 3, 2, 4]</p>"},{"location":"graph/#traversee-bfs","title":"Travers\u00e9e BFS","text":"<p>print(graph.bfs(1))  # Affiche : [1, 2, 3, 4]</p>"},{"location":"linked_list/","title":"Documentation des classes <code>Node</code> et <code>LinkedList</code>","text":"<p>Les classes <code>Node</code> et <code>LinkedList</code> impl\u00e9mentent une liste simplement cha\u00een\u00e9e. La classe <code>Node</code> repr\u00e9sente un \u00e9l\u00e9ment de la liste, et la classe <code>LinkedList</code> g\u00e8re la liste elle-m\u00eame avec des m\u00e9thodes pour ins\u00e9rer, supprimer, rechercher et parcourir les \u00e9l\u00e9ments.</p>"},{"location":"linked_list/#classe-node","title":"Classe <code>Node</code>","text":"<p>La classe <code>Node</code> repr\u00e9sente un noeud individuel dans la liste cha\u00een\u00e9e. Chaque noeud contient des donn\u00e9es et une r\u00e9f\u00e9rence vers le prochain noeud dans la liste.</p>"},{"location":"linked_list/#attributs","title":"Attributs","text":"<ul> <li><code>data</code> : Les donn\u00e9es stock\u00e9es dans le noeud.</li> <li><code>next</code> : R\u00e9f\u00e9rence vers le prochain noeud dans la liste (par d\u00e9faut <code>None</code>).</li> </ul>"},{"location":"linked_list/#methodes","title":"M\u00e9thodes","text":""},{"location":"linked_list/#__init__self-data","title":"<code>__init__(self, data)</code>","text":"<p>Initialise un nouveau noeud avec les donn\u00e9es fournies.</p>"},{"location":"linked_list/#arguments","title":"Arguments :","text":"<ul> <li><code>data</code> : Les donn\u00e9es \u00e0 stocker dans le noeud.</li> </ul>"},{"location":"linked_list/#__repr__self","title":"<code>__repr__(self)</code>","text":"<p>Retourne une repr\u00e9sentation sous forme de cha\u00eene du noeud.</p>"},{"location":"linked_list/#retour","title":"Retour :","text":"<ul> <li>Une cha\u00eene repr\u00e9sentant le noeud, par exemple <code>Node(5)</code>.</li> </ul>"},{"location":"linked_list/#classe-linkedlist","title":"Classe <code>LinkedList</code>","text":"<p>La classe <code>LinkedList</code> impl\u00e9mente une liste simplement cha\u00een\u00e9e avec des m\u00e9thodes pour ins\u00e9rer, supprimer, rechercher, et parcourir les \u00e9l\u00e9ments.</p>"},{"location":"linked_list/#attributs_1","title":"Attributs","text":"<ul> <li><code>head</code> : R\u00e9f\u00e9rence vers le premier noeud de la liste (par d\u00e9faut <code>None</code>).</li> <li><code>size</code> : Taille de la liste, c'est-\u00e0-dire le nombre d'\u00e9l\u00e9ments dans la liste.</li> </ul>"},{"location":"linked_list/#methodes_1","title":"M\u00e9thodes","text":""},{"location":"linked_list/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initialise une nouvelle liste cha\u00een\u00e9e vide.</p>"},{"location":"linked_list/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour. La m\u00e9thode initialise une liste vide.</li> </ul>"},{"location":"linked_list/#insertself-data-position0","title":"<code>insert(self, data, position=0)</code>","text":"<p>Ins\u00e8re un nouveau noeud contenant <code>data</code> \u00e0 la position sp\u00e9cifi\u00e9e dans la liste.</p>"},{"location":"linked_list/#arguments_1","title":"Arguments :","text":"<ul> <li><code>data</code> : Les donn\u00e9es \u00e0 ins\u00e9rer dans le nouveau noeud.</li> <li><code>position</code> : La position (index bas\u00e9 sur 0) o\u00f9 ins\u00e9rer le noeud. Par d\u00e9faut, le noeud est ins\u00e9r\u00e9 au d\u00e9but de la liste (<code>position=0</code>).</li> </ul>"},{"location":"linked_list/#exceptions","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la position sp\u00e9cifi\u00e9e est en dehors des limites de la liste.</li> </ul>"},{"location":"linked_list/#retour_2","title":"Retour :","text":"<ul> <li>Aucun retour. Le noeud est ins\u00e9r\u00e9 \u00e0 la position sp\u00e9cifi\u00e9e.</li> </ul>"},{"location":"linked_list/#deleteself-position","title":"<code>delete(self, position)</code>","text":"<p>Supprime le noeud \u00e0 la position sp\u00e9cifi\u00e9e dans la liste.</p>"},{"location":"linked_list/#arguments_2","title":"Arguments :","text":"<ul> <li><code>position</code> : La position (index bas\u00e9 sur 0) du noeud \u00e0 supprimer.</li> </ul>"},{"location":"linked_list/#exceptions_1","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la position sp\u00e9cifi\u00e9e est en dehors des limites de la liste ou si la liste est vide.</li> </ul>"},{"location":"linked_list/#retour_3","title":"Retour :","text":"<ul> <li>Aucun retour. Le noeud est supprim\u00e9 de la liste.</li> </ul>"},{"location":"linked_list/#searchself-data","title":"<code>search(self, data)</code>","text":"<p>Recherche un noeud contenant <code>data</code> dans la liste.</p>"},{"location":"linked_list/#arguments_3","title":"Arguments :","text":"<ul> <li><code>data</code> : Les donn\u00e9es \u00e0 rechercher dans la liste.</li> </ul>"},{"location":"linked_list/#retour_4","title":"Retour :","text":"<ul> <li>La position du premier noeud contenant <code>data</code> si trouv\u00e9.</li> <li><code>-1</code> si <code>data</code> n'est pas trouv\u00e9 dans la liste.</li> </ul>"},{"location":"linked_list/#traverseself","title":"<code>traverse(self)</code>","text":"<p>Retourne une liste contenant toutes les donn\u00e9es des noeuds de la liste cha\u00een\u00e9e.</p>"},{"location":"linked_list/#retour_5","title":"Retour :","text":"<ul> <li>Une liste des donn\u00e9es dans l'ordre de la liste cha\u00een\u00e9e.</li> </ul>"},{"location":"linked_list/#__len__self","title":"<code>__len__(self)</code>","text":"<p>Retourne la taille de la liste cha\u00een\u00e9e.</p>"},{"location":"linked_list/#retour_6","title":"Retour :","text":"<ul> <li>Le nombre d'\u00e9l\u00e9ments dans la liste.</li> </ul>"},{"location":"linked_list/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Retourne une repr\u00e9sentation sous forme de cha\u00eene de la liste cha\u00een\u00e9e.</p>"},{"location":"linked_list/#retour_7","title":"Retour :","text":"<ul> <li>Une cha\u00eene repr\u00e9sentant la liste cha\u00een\u00e9e. Les noeuds sont s\u00e9par\u00e9s par \" -&gt; \".</li> <li>Si la liste est vide, retourne \"Empty LinkedList\".</li> </ul>"},{"location":"linked_list/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python</p>"},{"location":"linked_list/#creation-dune-liste-chainee","title":"Cr\u00e9ation d'une liste cha\u00een\u00e9e","text":"<p>ll = LinkedList()</p>"},{"location":"linked_list/#insertion-de-noeuds","title":"Insertion de noeuds","text":"<p>ll.insert(10) ll.insert(20) ll.insert(30, position=1)</p>"},{"location":"linked_list/#affichage-de-la-liste","title":"Affichage de la liste","text":"<p>print(ll)  # Affiche : 10 -&gt; 30 -&gt; 20</p>"},{"location":"linked_list/#recherche-dun-element","title":"Recherche d'un \u00e9l\u00e9ment","text":"<p>print(ll.search(20))  # Affiche : 2 print(ll.search(40))  # Affiche : -1</p>"},{"location":"linked_list/#traversee-de-la-liste","title":"Travers\u00e9e de la liste","text":"<p>print(ll.traverse())  # Affiche : [10, 30, 20]</p>"},{"location":"linked_list/#suppression-dun-noeud","title":"Suppression d'un noeud","text":"<p>ll.delete(1)  # Supprime le noeud \u00e0 la position 1 (30)</p>"},{"location":"linked_list/#affichage-apres-suppression","title":"Affichage apr\u00e8s suppression","text":"<p>print(ll)  # Affiche : 10 -&gt; 20</p>"},{"location":"linked_list/#taille-de-la-liste","title":"Taille de la liste","text":"<p>print(len(ll))  # Affiche : 2</p>"},{"location":"queue/","title":"Documentation de la classe <code>Queue</code>","text":"<p>La classe <code>Queue</code> impl\u00e9mente une file (queue) en utilisant une liste comme stockage sous-jacent. Elle permet d'ajouter des \u00e9l\u00e9ments \u00e0 la fin de la file, de les retirer du d\u00e9but, et de v\u00e9rifier l'\u00e9tat de la file.</p>"},{"location":"queue/#attributs","title":"Attributs","text":"<ul> <li><code>queue</code> : Liste qui contient les \u00e9l\u00e9ments de la file.</li> </ul>"},{"location":"queue/#methodes","title":"M\u00e9thodes","text":""},{"location":"queue/#__init__self-initial_itemsnone","title":"<code>__init__(self, initial_items=None)</code>","text":"<p>Initialise une nouvelle file.</p>"},{"location":"queue/#arguments","title":"Arguments :","text":"<ul> <li><code>initial_items</code> : Liste optionnelle d'\u00e9l\u00e9ments pour initialiser la file. Si non sp\u00e9cifi\u00e9e, la file sera vide.</li> </ul>"},{"location":"queue/#retour","title":"Retour :","text":"<ul> <li>Aucun retour. La m\u00e9thode initialise la file avec les \u00e9l\u00e9ments fournis (ou une file vide si aucun \u00e9l\u00e9ment n'est donn\u00e9).</li> </ul>"},{"location":"queue/#enqueueself-item","title":"<code>enqueue(self, item)</code>","text":"<p>Ajoute un \u00e9l\u00e9ment \u00e0 la fin de la file.</p>"},{"location":"queue/#arguments_1","title":"Arguments :","text":"<ul> <li><code>item</code> : L'\u00e9l\u00e9ment \u00e0 ajouter \u00e0 la fin de la file.</li> </ul>"},{"location":"queue/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour. L'\u00e9l\u00e9ment est ajout\u00e9 \u00e0 la fin de la file.</li> </ul>"},{"location":"queue/#dequeueself","title":"<code>dequeue(self)</code>","text":"<p>Retire et retourne l'\u00e9l\u00e9ment du d\u00e9but de la file.</p>"},{"location":"queue/#exceptions","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la file est vide.</li> </ul>"},{"location":"queue/#retour_2","title":"Retour :","text":"<ul> <li>L'\u00e9l\u00e9ment retir\u00e9 du d\u00e9but de la file.</li> </ul>"},{"location":"queue/#peekself","title":"<code>peek(self)</code>","text":"<p>Retourne l'\u00e9l\u00e9ment du d\u00e9but de la file sans le retirer.</p>"},{"location":"queue/#exceptions_1","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la file est vide.</li> </ul>"},{"location":"queue/#retour_3","title":"Retour :","text":"<ul> <li>L'\u00e9l\u00e9ment du d\u00e9but de la file sans le retirer.</li> </ul>"},{"location":"queue/#is_emptyself","title":"<code>is_empty(self)</code>","text":"<p>Retourne <code>True</code> si la file est vide, sinon <code>False</code>.</p>"},{"location":"queue/#retour_4","title":"Retour :","text":"<ul> <li><code>True</code> si la file est vide, <code>False</code> sinon.</li> </ul>"},{"location":"queue/#sizeself","title":"<code>size(self)</code>","text":"<p>Retourne le nombre d'\u00e9l\u00e9ments dans la file.</p>"},{"location":"queue/#retour_5","title":"Retour :","text":"<ul> <li>Le nombre d'\u00e9l\u00e9ments dans la file.</li> </ul>"},{"location":"queue/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Retourne une repr\u00e9sentation sous forme de cha\u00eene de la file.</p>"},{"location":"queue/#retour_6","title":"Retour :","text":"<ul> <li>Une cha\u00eene repr\u00e9sentant la file sous la forme <code>Queue([element1, element2, ...])</code>.</li> </ul>"},{"location":"queue/#__len__self","title":"<code>__len__(self)</code>","text":"<p>Retourne le nombre d'\u00e9l\u00e9ments dans la file.</p>"},{"location":"queue/#retour_7","title":"Retour :","text":"<ul> <li>Le nombre d'\u00e9l\u00e9ments dans la file (\u00e9quivalent \u00e0 <code>self.size()</code>).</li> </ul>"},{"location":"queue/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python</p>"},{"location":"queue/#creation-dune-file-avec-des-elements-initiaux","title":"Cr\u00e9ation d'une file avec des \u00e9l\u00e9ments initiaux","text":"<p>queue = Queue([1, 2, 3])</p>"},{"location":"queue/#ajout-dun-element-a-la-fin-de-la-file","title":"Ajout d'un \u00e9l\u00e9ment \u00e0 la fin de la file","text":"<p>queue.enqueue(4)</p>"},{"location":"queue/#affichage-de-la-file","title":"Affichage de la file","text":"<p>print(queue)  # Affiche : Queue([1, 2, 3, 4])</p>"},{"location":"queue/#retrait-dun-element-du-debut-de-la-file","title":"Retrait d'un \u00e9l\u00e9ment du d\u00e9but de la file","text":"<p>print(queue.dequeue())  # Affiche : 1</p>"},{"location":"queue/#affichage-de-la-file-apres-le-retrait","title":"Affichage de la file apr\u00e8s le retrait","text":"<p>print(queue)  # Affiche : Queue([2, 3, 4])</p>"},{"location":"queue/#verification-de-lelement-au-debut-de-la-file","title":"V\u00e9rification de l'\u00e9l\u00e9ment au d\u00e9but de la file","text":"<p>print(queue.peek())  # Affiche : 2</p>"},{"location":"queue/#verification-si-la-file-est-vide","title":"V\u00e9rification si la file est vide","text":"<p>print(queue.is_empty())  # Affiche : False</p>"},{"location":"queue/#taille-de-la-file","title":"Taille de la file","text":"<p>print(queue.size())  # Affiche : 3</p>"},{"location":"queue/#utilisation-de-la-methode-len-pour-obtenir-la-taille","title":"Utilisation de la m\u00e9thode len pour obtenir la taille","text":"<p>print(len(queue))  # Affiche : 3</p>"},{"location":"stack/","title":"Documentation de la classe <code>Stack</code>","text":"<p>La classe <code>Stack</code> impl\u00e9mente une pile (stack) en utilisant une liste comme stockage sous-jacent. Elle permet d'ajouter des \u00e9l\u00e9ments au sommet de la pile, de les retirer du sommet, et de v\u00e9rifier l'\u00e9tat de la pile.</p>"},{"location":"stack/#attributs","title":"Attributs","text":"<ul> <li><code>stack</code> : Liste qui contient les \u00e9l\u00e9ments de la pile.</li> </ul>"},{"location":"stack/#methodes","title":"M\u00e9thodes","text":""},{"location":"stack/#__init__self-initial_itemsnone","title":"<code>__init__(self, initial_items=None)</code>","text":"<p>Initialise une nouvelle pile.</p>"},{"location":"stack/#arguments","title":"Arguments :","text":"<ul> <li><code>initial_items</code> : Liste optionnelle d'\u00e9l\u00e9ments pour initialiser la pile. Si non sp\u00e9cifi\u00e9e, la pile sera vide.</li> </ul>"},{"location":"stack/#retour","title":"Retour :","text":"<ul> <li>Aucun retour. La m\u00e9thode initialise la pile avec les \u00e9l\u00e9ments fournis (ou une pile vide si aucun \u00e9l\u00e9ment n'est donn\u00e9).</li> </ul>"},{"location":"stack/#pushself-item","title":"<code>push(self, item)</code>","text":"<p>Ajoute un \u00e9l\u00e9ment au sommet de la pile.</p>"},{"location":"stack/#arguments_1","title":"Arguments :","text":"<ul> <li><code>item</code> : L'\u00e9l\u00e9ment \u00e0 ajouter au sommet de la pile.</li> </ul>"},{"location":"stack/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour. L'\u00e9l\u00e9ment est ajout\u00e9 au sommet de la pile.</li> </ul>"},{"location":"stack/#popself","title":"<code>pop(self)</code>","text":"<p>Retire et retourne l'\u00e9l\u00e9ment du sommet de la pile.</p>"},{"location":"stack/#exceptions","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la pile est vide.</li> </ul>"},{"location":"stack/#retour_2","title":"Retour :","text":"<ul> <li>L'\u00e9l\u00e9ment retir\u00e9 du sommet de la pile.</li> </ul>"},{"location":"stack/#peekself","title":"<code>peek(self)</code>","text":"<p>Retourne l'\u00e9l\u00e9ment du sommet de la pile sans le retirer.</p>"},{"location":"stack/#exceptions_1","title":"Exceptions :","text":"<ul> <li><code>IndexError</code> : Si la pile est vide.</li> </ul>"},{"location":"stack/#retour_3","title":"Retour :","text":"<ul> <li>L'\u00e9l\u00e9ment du sommet de la pile sans le retirer.</li> </ul>"},{"location":"stack/#is_emptyself","title":"<code>is_empty(self)</code>","text":"<p>Retourne <code>True</code> si la pile est vide, sinon <code>False</code>.</p>"},{"location":"stack/#retour_4","title":"Retour :","text":"<ul> <li><code>True</code> si la pile est vide, <code>False</code> sinon.</li> </ul>"},{"location":"stack/#sizeself","title":"<code>size(self)</code>","text":"<p>Retourne le nombre d'\u00e9l\u00e9ments dans la pile.</p>"},{"location":"stack/#retour_5","title":"Retour :","text":"<ul> <li>Le nombre d'\u00e9l\u00e9ments dans la pile.</li> </ul>"},{"location":"stack/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Retourne une repr\u00e9sentation sous forme de cha\u00eene de la pile.</p>"},{"location":"stack/#retour_6","title":"Retour :","text":"<ul> <li>Une cha\u00eene repr\u00e9sentant la pile sous la forme <code>Stack([element1, element2, ...])</code>.</li> </ul>"},{"location":"stack/#__len__self","title":"<code>__len__(self)</code>","text":"<p>Retourne le nombre d'\u00e9l\u00e9ments dans la pile.</p>"},{"location":"stack/#retour_7","title":"Retour :","text":"<ul> <li>Le nombre d'\u00e9l\u00e9ments dans la pile (\u00e9quivalent \u00e0 <code>self.size()</code>).</li> </ul>"},{"location":"stack/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python</p>"},{"location":"stack/#creation-dune-pile-avec-des-elements-initiaux","title":"Cr\u00e9ation d'une pile avec des \u00e9l\u00e9ments initiaux","text":"<p>stack = Stack([1, 2, 3])</p>"},{"location":"stack/#ajout-dun-element-au-sommet-de-la-pile","title":"Ajout d'un \u00e9l\u00e9ment au sommet de la pile","text":"<p>stack.push(4)</p>"},{"location":"stack/#affichage-de-la-pile","title":"Affichage de la pile","text":"<p>print(stack)  # Affiche : Stack([1, 2, 3, 4])</p>"},{"location":"stack/#retrait-dun-element-du-sommet-de-la-pile","title":"Retrait d'un \u00e9l\u00e9ment du sommet de la pile","text":"<p>print(stack.pop())  # Affiche : 4</p>"},{"location":"stack/#affichage-de-la-pile-apres-le-retrait","title":"Affichage de la pile apr\u00e8s le retrait","text":"<p>print(stack)  # Affiche : Stack([1, 2, 3])</p>"},{"location":"stack/#verification-de-lelement-au-sommet-de-la-pile","title":"V\u00e9rification de l'\u00e9l\u00e9ment au sommet de la pile","text":"<p>print(stack.peek())  # Affiche : 3</p>"},{"location":"stack/#verification-si-la-pile-est-vide","title":"V\u00e9rification si la pile est vide","text":"<p>print(stack.is_empty())  # Affiche : False</p>"},{"location":"stack/#taille-de-la-pile","title":"Taille de la pile","text":"<p>print(stack.size())  # Affiche : 3</p>"},{"location":"stack/#utilisation-de-la-methode-len-pour-obtenir-la-taille","title":"Utilisation de la m\u00e9thode len pour obtenir la taille","text":"<p>print(len(stack))  # Affiche : 3</p>"},{"location":"tree/","title":"Documentation de la classe <code>BinarySearchTree</code>","text":"<p>La classe <code>BinarySearchTree</code> impl\u00e9mente un arbre binaire de recherche (BST) permettant d'ins\u00e9rer des \u00e9l\u00e9ments, de les rechercher, et de traverser l'arbre de diff\u00e9rentes mani\u00e8res (infixe, pr\u00e9fixe et postfixe).</p>"},{"location":"tree/#attributs","title":"Attributs","text":"<ul> <li><code>root</code> : Le n\u0153ud racine de l'arbre, initialis\u00e9 \u00e0 <code>None</code>.</li> </ul>"},{"location":"tree/#methodes","title":"M\u00e9thodes","text":""},{"location":"tree/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initialise un nouvel arbre binaire de recherche (BST) vide.</p>"},{"location":"tree/#retour","title":"Retour :","text":"<ul> <li>Aucun retour. L'arbre est initialis\u00e9 avec une racine <code>None</code>.</li> </ul>"},{"location":"tree/#insertself-value","title":"<code>insert(self, value)</code>","text":"<p>Ins\u00e8re une valeur dans l'arbre binaire de recherche (BST).</p>"},{"location":"tree/#arguments","title":"Arguments :","text":"<ul> <li><code>value</code> : La valeur \u00e0 ins\u00e9rer dans l'arbre.</li> </ul>"},{"location":"tree/#retour_1","title":"Retour :","text":"<ul> <li>Aucun retour. La valeur est ins\u00e9r\u00e9e dans l'arbre.</li> </ul>"},{"location":"tree/#_insert_recursiveself-node-value","title":"<code>_insert_recursive(self, node, value)</code>","text":"<p>M\u00e9thode auxiliaire pour l'insertion r\u00e9cursive dans l'arbre.</p>"},{"location":"tree/#arguments_1","title":"Arguments :","text":"<ul> <li><code>node</code> : Le n\u0153ud actuel \u00e0 partir duquel la recherche d'insertion commence.</li> <li><code>value</code> : La valeur \u00e0 ins\u00e9rer dans l'arbre.</li> </ul>"},{"location":"tree/#retour_2","title":"Retour :","text":"<ul> <li>Aucun retour. La valeur est ins\u00e9r\u00e9e r\u00e9cursivement \u00e0 la position correcte dans l'arbre.</li> </ul>"},{"location":"tree/#searchself-value","title":"<code>search(self, value)</code>","text":"<p>Recherche une valeur dans l'arbre binaire de recherche (BST).</p>"},{"location":"tree/#arguments_2","title":"Arguments :","text":"<ul> <li><code>value</code> : La valeur \u00e0 rechercher dans l'arbre.</li> </ul>"},{"location":"tree/#retour_3","title":"Retour :","text":"<ul> <li><code>True</code> si la valeur est trouv\u00e9e dans l'arbre, <code>False</code> sinon.</li> </ul>"},{"location":"tree/#_search_recursiveself-node-value","title":"<code>_search_recursive(self, node, value)</code>","text":"<p>M\u00e9thode auxiliaire pour la recherche r\u00e9cursive d'une valeur dans l'arbre.</p>"},{"location":"tree/#arguments_3","title":"Arguments :","text":"<ul> <li><code>node</code> : Le n\u0153ud actuel o\u00f9 la recherche commence.</li> <li><code>value</code> : La valeur \u00e0 rechercher dans l'arbre.</li> </ul>"},{"location":"tree/#retour_4","title":"Retour :","text":"<ul> <li><code>True</code> si la valeur est trouv\u00e9e dans l'arbre, <code>False</code> sinon.</li> </ul>"},{"location":"tree/#inorder_traversalself","title":"<code>inorder_traversal(self)</code>","text":"<p>Retourne une liste des valeurs de l'arbre en utilisant un parcours infixe (inorder).</p>"},{"location":"tree/#retour_5","title":"Retour :","text":"<ul> <li>Une liste des valeurs de l'arbre en ordre croissant.</li> </ul>"},{"location":"tree/#_inorder_recursiveself-node-result","title":"<code>_inorder_recursive(self, node, result)</code>","text":"<p>M\u00e9thode auxiliaire pour le parcours infixe r\u00e9cursif de l'arbre.</p>"},{"location":"tree/#arguments_4","title":"Arguments :","text":"<ul> <li><code>node</code> : Le n\u0153ud actuel pour le parcours.</li> <li><code>result</code> : La liste qui contient les valeurs du parcours.</li> </ul>"},{"location":"tree/#retour_6","title":"Retour :","text":"<ul> <li>Aucun retour. Les valeurs sont ajout\u00e9es \u00e0 la liste <code>result</code> par r\u00e9cursion.</li> </ul>"},{"location":"tree/#preorder_traversalself","title":"<code>preorder_traversal(self)</code>","text":"<p>Retourne une liste des valeurs de l'arbre en utilisant un parcours pr\u00e9fixe (preorder).</p>"},{"location":"tree/#retour_7","title":"Retour :","text":"<ul> <li>Une liste des valeurs de l'arbre dans l'ordre pr\u00e9fixe.</li> </ul>"},{"location":"tree/#_preorder_recursiveself-node-result","title":"<code>_preorder_recursive(self, node, result)</code>","text":"<p>M\u00e9thode auxiliaire pour le parcours pr\u00e9fixe r\u00e9cursif de l'arbre.</p>"},{"location":"tree/#arguments_5","title":"Arguments :","text":"<ul> <li><code>node</code> : Le n\u0153ud actuel pour le parcours.</li> <li><code>result</code> : La liste qui contient les valeurs du parcours.</li> </ul>"},{"location":"tree/#retour_8","title":"Retour :","text":"<ul> <li>Aucun retour. Les valeurs sont ajout\u00e9es \u00e0 la liste <code>result</code> par r\u00e9cursion.</li> </ul>"},{"location":"tree/#postorder_traversalself","title":"<code>postorder_traversal(self)</code>","text":"<p>Retourne une liste des valeurs de l'arbre en utilisant un parcours postfixe (postorder).</p>"},{"location":"tree/#retour_9","title":"Retour :","text":"<ul> <li>Une liste des valeurs de l'arbre dans l'ordre postfixe.</li> </ul>"},{"location":"tree/#_postorder_recursiveself-node-result","title":"<code>_postorder_recursive(self, node, result)</code>","text":"<p>M\u00e9thode auxiliaire pour le parcours postfixe r\u00e9cursif de l'arbre.</p>"},{"location":"tree/#arguments_6","title":"Arguments :","text":"<ul> <li><code>node</code> : Le n\u0153ud actuel pour le parcours.</li> <li><code>result</code> : La liste qui contient les valeurs du parcours.</li> </ul>"},{"location":"tree/#retour_10","title":"Retour :","text":"<ul> <li>Aucun retour. Les valeurs sont ajout\u00e9es \u00e0 la liste <code>result</code> par r\u00e9cursion.</li> </ul>"},{"location":"tree/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Retourne une repr\u00e9sentation sous forme de cha\u00eene de caract\u00e8res de l'arbre binaire de recherche en utilisant un parcours infixe.</p>"},{"location":"tree/#retour_11","title":"Retour :","text":"<ul> <li>Une cha\u00eene de caract\u00e8res repr\u00e9sentant les valeurs de l'arbre dans l'ordre infixe sous la forme de liste.</li> </ul>"},{"location":"tree/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<p>```python</p>"},{"location":"tree/#creation-dun-arbre-binaire-de-recherche","title":"Cr\u00e9ation d'un arbre binaire de recherche","text":"<p>bst = BinarySearchTree()</p>"},{"location":"tree/#insertion-des-valeurs","title":"Insertion des valeurs","text":"<p>bst.insert(10) bst.insert(5) bst.insert(15) bst.insert(2) bst.insert(7) bst.insert(12) bst.insert(18)</p>"},{"location":"tree/#recherche-dune-valeur-dans-larbre","title":"Recherche d'une valeur dans l'arbre","text":"<p>print(bst.search(7))  # Affiche : True print(bst.search(20))  # Affiche : False</p>"},{"location":"tree/#parcours-infixe-inorder","title":"Parcours infixe (inorder)","text":"<p>print(bst.inorder_traversal())  # Affiche : [2, 5, 7, 10, 12, 15, 18]</p>"},{"location":"tree/#parcours-prefixe-preorder","title":"Parcours pr\u00e9fixe (preorder)","text":"<p>print(bst.preorder_traversal())  # Affiche : [10, 5, 2, 7, 15, 12, 18]</p>"},{"location":"tree/#parcours-postfixe-postorder","title":"Parcours postfixe (postorder)","text":"<p>print(bst.postorder_traversal())  # Affiche : [2, 7, 5, 12, 18, 15, 10]</p>"},{"location":"tree/#affichage-de-larbre-sous-forme-de-chaine","title":"Affichage de l'arbre sous forme de cha\u00eene","text":"<p>print(bst)  # Affiche : [2, 5, 7, 10, 12, 15, 18]</p>"}]}